cmdhistory=["(A*search world-state  '(at '(5 3) w0) format-state)" "(A*search world-state  '(at '(5 3) w0) format-state \:debug true)" "(test-search)" "(A*search world-state '(at '(3 8) w0) format-state)" "(A*search world-state '(at '(3 8) w0) format-state \:debug true)" "(A*Search world-state '(at '(3 8) w0) format-state \:debug true)" "(A*search world-state '(at '(3 8) w0) format-state \:debug true)" "(A*search world-state '(at '(3 7) w0) format-state \:debug true)" "s" "(defn prefix-remover \\"block\\")" "\=> (defn prefix-remover (str(\\"block\\"))\\n     )" "(defn prefix-remover (str[\\"block\\"]))" "(defn prefix-remover (str\\"block\\"))" "(defn prefix-remover (\\"block\\")\\n )" "(defn prefix-remover [\\"block\\"])" "(defn prefix-remover \\"block\\")" "(prefix-remover (\\"block\\"))" "(prefix-remover \\"block\\")" "(reduce re-find (prefixes \\"non\\"))" "(reduce re-find prefixes \\"non\\")" "(map re-find prefixes \\"non\\")" "(map re-pattern prefixes \\"non\\")" "(map re-find prefixes \\"non\\")" "(s/includes? prefixes \\"non\\")" "(s/includes? prefixes \\"nonsd\\")" "(prefix-remover \\"forever\\")" "(prefix-remover \\"forever mad\\")" "(\=(1 1))" "(\=1 1)" "(\= 1 1)" "(\= '() nil)" "(\= [] nil)" "(empty? [])" "(empty? [1])" "(count [] nil)" "(count [])" "(count [3])" "(prefix-remover \\"non\\" prefixes)" "(prefix-remover \\"non\\")" "(prefix-remover \\"hello world\\")" "ls" "(prefix-remover \\"hello world\\")" "(empty? prefixes)" "(s/includes? prefixes \\"non\\")" "(s/includes? prefixes \\"nfhfhf\\")" "(prefix-remover \\"hello world\\")" "(prefix-remover \\"nonbeliever person\\")" "(s/includes? prefixes \\"antiman\\")" "(s/includes? prefixes \\"anti-man\\")" "(s/includes? prefixes \\"anti\\")" "(s/includes? prefixes \\"antis\\")" "(s/includes? prefixes \\"zxzxanti\\")" "(map(s/includes? prefixes \\"antis\\"))" "(reduce(s/includes? prefixes \\"antis\\"))" "(reduce s/includes? (prefixes \\"antis\\"))" "(reduce (s/includes? (prefixes \\"antis\\")))" "(reduce (s/includes? prefixes \\"antis\\"))" "(reduce s/includes? \\"antis\\" coll)" "(reduce s/includes? \\"antis\\" prefixes)" "(reduce s/includes? (str \\"antis\\") prefixes)" "prefixes" "(first prefixs)" "(first prefixes)" "(ffirst prefixes)" "(reduce s/includes? \\"antis\\" (map ffirst prefixes))" "(reduce s/includes? \\"antis\\" (str(map ffirst prefixes)))" "(reduce s/includes? \\"antis\\" (map (str ffirst) prefixes))" "(reduce s/includes? \\"antis\\" (map str ffirst prefixes))" "(reduce s/includes? \\"antis\\" (map ffirst prefixes))" "(reduce s/includes? \\"antis\\" (map str(map ffirst prefixes)))" "(reduce s/includes? \\"antis\\" (reduce str(map ffirst prefixes)))" "(reduce s/includes? \\"antis\\" (str(map ffirst prefixes)))" "(reduce s/includes? \\"antis\\" (map ffirst (stringify-keys prefixes)))" "(reduce s/includes? \\"antis\\" (map first (stringify-keys prefixes)))" "(reduce s/includes? \\"anti\\" (map first (stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(s/includes? \\"anti\\" (map first (stringify-keys prefixes)))" "(s/includes? \\"anti\\" (eval(map first (stringify-keys prefixes))))" "(s/includes? \\"anti\\" (map first (stringify-keys prefixes)))" "(s/includes? \\"anti\\" (eval(map first (stringify-keys prefixes))))" "(s/includes? \\"anti\\" (apply map first (stringify-keys prefixes)))" "(s/includes? \\"anti\\" (apply str map first (stringify-keys prefixes)))" "(apply str map first (stringify-keys prefixes))" "(apply str map ffirst (stringify-keys prefixes))" "(apply str map fffirst (stringify-keys prefixes))" "(apply str map ffirst (stringify-keys prefixes))" "(str map ffirst (stringify-keys prefixes))" "(map ffirst (stringify-keys prefixes))" "(map first (stringify-keys prefixes))" "(s/includes? \\"anti\\" (map first (stringify-keys prefixes)))" "(s/includes? \\"anti\\" (apply map first (stringify-keys prefixes)))" "(s/includes? \\"anti\\" (apply str(map first (stringify-keys prefixes))))" "(s/includes? \\"antid\\" (apply str(map first (stringify-keys prefixes))))" "(apply str(map first (stringify-keys prefixes)))" "(apply (map first (stringify-keys prefixes)))" "(apply str(map first (stringify-keys prefixes)))" "(s/includes \\"anit\\" \\"interimunenunderantisuboverforetransemdissuperirildenonpreremidsemimisin\\")" "(s/includes> \\"anit\\" \\"interimunenunderantisuboverforetransemdissuperirildenonpreremidsemimisin\\")" "(s/includes? \\"anit\\" \\"interimunenunderantisuboverforetransemdissuperirildenonpreremidsemimisin\\")" "(s/includes? \\"sub\\" \\"interimunenunderantisuboverforetransemdissuperirildenonpreremidsemimisin\\")" "(s/includes? \\"interimunenunderantisuboverforetransemdissuperirildenonpreremidsemimisin\\"\\"sub\\")" "(s/includes? (apply str(map first (stringify-keys prefixes))) \\"antid\\" )" "(s/includes? (apply str(map first (stringify-keys prefixes))) \\"anti\\" )" "(s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map first (stringify-keys prefixes))" "(map ffirst (stringify-keys prefixes))" "(map first (stringify-keys prefixes))" "(s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(first(s/includes? (map first (stringify-keys prefixes)) \\"anti\\" ))" "(s/includes? (map first(map first (stringify-keys prefixes)) \\"anti\\" ))" "(s/includes? (map first(map first (stringify-keys prefixes))) \\"anti\\" )" "(map first(map first (stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(contains? (map first (stringify-keys prefixes)) \\"anti\\")" "(contains? (apply list(map first (stringify-keys prefixes))) \\"anti\\")" "(contains? (apply [](map first (stringify-keys prefixes))) \\"anti\\")" "(contains? (apply vector(map first (stringify-keys prefixes))) \\"anti\\")" "(apply vector(map first (stringify-keys prefixes)))" "(apply list(map first (stringify-keys prefixes)))" "(first(apply list(map first (stringify-keys prefixes))))" "(first(map first (stringify-keys prefixes)))" "(s/includes? (first(map first (stringify-keys prefixes))) \\"anti\\" )" "(map s/includes? (first(map first (stringify-keys prefixes))) \\"anti\\" )" "(s/includes? (apply str(first(map first (stringify-keys prefixes)))) \\"anti\\" )" "(s/includes? (first(map first (stringify-keys prefixes))) \\"anti\\" )" "(s/includes? (first(map first (stringify-keys prefixes))) \\"a\\" )" "(s/includes? (first(map first (stringify-keys prefixes))) \\"e\\" )" "(s/includes? (first(map first (stringify-keys prefixes))) \\"re\\" )" "(first(map first (stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(s/includes? (first(map first (stringify-keys prefixes))) \\"inter\\" )" "(s/includes? (first(map first (stringify-keys prefixes))) \\"international\\" )" "(s/includes? (first(map first (stringify-keys prefixes))) \\"inter national\\" )" "(\= 1 1)" "(prefix-remover \\"nonbeliever person\\")" "(map ffirst (stringify-keys prefixes))" "(s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map first (stringify-keys prefixes))" "(s/includes? (map first (stringify-keys prefixes)) \\"inter\\" )" "(s/includes? (first(map first (stringify-keys prefixes)) \\"inter\\" ))" "(s/includes? (first(map first (stringify-keys prefixes))) \\"inter\\" )" "(s/includes? (map first(map first (stringify-keys prefixes))) \\"inter\\" )" "(s/includes? (reduce first(map first (stringify-keys prefixes))) \\"inter\\" )" "(first(map first (stringify-keys prefixes)))" "(s/includes? (first(map first (stringify-keys prefixes))) \\"inter\\" )" "(s/includes? (first(map first (stringify-keys prefixes))) \\"non\\" )" "(s/includes? (map(map first (stringify-keys prefixes))) \\"non\\" )" "(s/includes? (reduce(map first (stringify-keys prefixes))) \\"non\\" )" "(s/includes? (reduce (first(map first (stringify-keys prefixes)))) \\"non\\" )" "(s/includes? (reduce first(map first (stringify-keys prefixes))) \\"non\\" )" "(s/includes? (map first(map first (stringify-keys prefixes))) \\"non\\" )" "(s/includes? (map first(map first (stringify-keys prefixes))) \\"anti\\" )" "(map first(map first (stringify-keys prefixes)))" "(fn [x](map first (stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(fn [x] (map first (stringify-keys prefixes)))" "(s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map first (stringify-keys prefixes)\\n    )" "(s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(s/includes? first(map first (stringify-keys prefixes)) \\"anti\\" )" "(s/includes? (first(map first (stringify-keys prefixes)) \\"anti\\" ))" "(s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map first (s/includes? (map first (stringify-keys prefixes)) \\"anti\\" ))" "(map s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map first (stringify-keys prefixes))" "(map s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map first (stringify-keys prefixes))" "(map s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map s/includes? (into [](map first (stringify-keys prefixes))) \\"anti\\" )" "(map s/includes? into [](map first (stringify-keys prefixes)) \\"anti\\" )" "(test-fn)" "(map s/includes? into [](map first (stringify-keys prefixes)) \\"anti\\" )" "(map s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(map s/includes? (apply str(map first (stringify-keys prefixes))) \\"anti\\" )" "(apply str(map first (stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(map str(map first (stringify-keys prefixes)))" "(map s/includes? (map str(map first (stringify-keys prefixes))) \\"anti\\" )" "(map str(map first (stringify-keys prefixes)))" "(map s/includes? (map into()(map first (stringify-keys prefixes))) \\"anti\\" )" "(map s/includes? (map into[](map first (stringify-keys prefixes))) \\"anti\\" )" "(map s/includes? (map (map first (stringify-keys prefixes))) \\"anti\\" )" "(map str(map first (stringify-keys prefixes)))" "(map into[](map first (stringify-keys prefixes)))" "(reduce into[](map first (stringify-keys prefixes)))" "(map str \\" \\"(map first (stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(map str \\"s\\"(map first (stringify-keys prefixes)))" "(reduce str \\" \\"(map first (stringify-keys prefixes)))" "(map first (str(stringify-keys prefixes)\\" \\"))" "(map first (str (stringify-keys prefixes) \\" \\"))" "(map first (str (stringify-keys prefixes) \\"s\\"))" "(map first (apply str (stringify-keys prefixes) \\"\\"))" "(map first (stringify-keys prefixes) \\"\\")" "(map first (stringify-keys prefixes))" "(map first (do str(stringify-keys prefixes)))" "(map first (do str(stringify-keys prefixes)\\"s\\"))" "(map first (apply str(stringify-keys prefixes)))" "(apply str(stringify-keys prefixes))" "(map first (apply str(stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(into [](map first (stringify-keys prefixes)))" "(map into [](map first (stringify-keys prefixes)))" "(apply str(map first (stringify-keys prefixes)))" "(map s/includes? (apply str(map first (stringify-keys prefixes))) \\"anti\\" )" "(map s/includes? (apply str(map first (stringify-keys prefixes))) \\"\\" )" "(map s/includes? (apply str(map first (stringify-keys prefixes))) \\"q\\" )" "(map s/includes? (apply str(map first (stringify-keys prefixes))) \\"qsdsdsds\\" )" "(map s/includes? (apply str(map first (stringify-keys prefixes))) (str \\"anti\\"))" "(map s/includes? (apply str(apply str(map first (stringify-keys prefixes)))) (str \\"anti\\"))" "(map s/includes? (map first (stringify-keys prefixes)) \\"anti\\")" "(map s/includes? (map first (stringify-keys prefixes)))" "(map first (stringify-keys prefixes))" "(.contains (map first (stringify-keys prefixes)) \\"anti\\")" "(.contains (map first (stringify-keys prefixes)) \\"antia\\")" "(.contains (map first (stringify-keys prefixes)) \\"anti\\")" "(map s/includes? (map first (stringify-keys prefixes)) \\"anti\\" )" "(prefix-remover \\"nonbeliever person\\")" "(.contains (map first (stringify-keys prefixes)) \\"anti\\")" "(.contains prefixes \\"anti\\")" "(.contains (map first (stringify-keys prefixes)) \\"anti\\")" "(prefix-remover \\"nonbeliever person\\")"]
eclipse.preferences.version=1
