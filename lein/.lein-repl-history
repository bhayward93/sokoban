(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
clear
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
exir
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-7 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exir
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
(use 'clojure.tools.trace)
(trace-vars contains?)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(use 'clojure.tools.trace)
(trace-vars contains?)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
clear
exit
(use 'clojure.tools.trace)
(trace-vars contains?)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
world-state
(use 'clojure.tools.trace))
(use 'clojure.tools.trace)
(trace-vars update-path))
(trace-vars update-path)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(use 'clojure.tools.trace)
(trace-vars update-path)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(use 'clojure.tools.trace)
(trace-vars update-path)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(use 'clojure.tools.trace)
(trace-vars update-path)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(use 'clojure.tools.trace)
(trace-vars update-path)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
(planner world-state '(at patch-3-8 worker-3) block-ops)
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
exit
(planner world-state '(at patch-4-8 worker-3) block-ops)
(planner world-state '(at patch-4-8 worker-3) goal-ops)
(planner world-state '(at patch-5-8 worker-3) goal-ops)
(planner world-state '(at patch-5-7 worker-3) goal-ops)
exit
(planner world-state '(at patch-5-7 worker-3) goal-ops)
exit
(planner world-state '(at 5 7 worker-3) goal-ops)
exit
(planner world-state '(at 5 7 worker-3) goal-ops)
exit
(planner world-state '(at 5 7 worker-3) goal-ops)
(planner world-state '(at 5 8 worker-3) goal-ops)
(planner world-state '(at 4 8 worker-3) goal-ops)
(planner world-state '(at 3 7 worker-3) goal-ops)
exit
(planner world-state '(at 3 7 worker-3) goal-ops)
exit
(planner world-state '(at 3 7 worker-3) goal-ops)
exit
((sort planner world-state) '(at 3 7 worker-3) goal-ops)
('(sort planner world-state) '(at 3 7 worker-3) goal-ops)
(planner (sort world-state) '(at 3 7 worker-3) goal-ops)
(planner '(sort world-state) '(at 3 7 worker-3) goal-ops)
exit
(planner world-state '(at (3 7) w3) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at (3 7) w0) goal-ops)
eit
exit
(planner world-state '(at (3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
(planner world-state '(at '(3 7) w0)) goal-ops)
(planner world-state '(goal '(at '(3 7) w0)) goal-ops)
exit
(planner world-state '(goal '(at '(3 7) w0)) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
(use 'clojure.tools.trace)
(trace-vars apply-goal-op)
exit
(use 'clojure.tools.trace)
(trace-vars apply-goal-op)
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exir
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
xit
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
(< 1 2)
(< 2 1)
(< (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7))))
(abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7)))
(abs (- (+ 3 7) (+ 3 7)))
(abs (- (+ 3 7) (+ 3 8)))
(< (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7))))
(+ (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7))))
(< '(abs (- (+ 3 7) (+ 3 7))) '(abs (- (+ 3 8) (+3 7))))
(+ (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7))))
+ (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7))))
+ (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7)))
(+ (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+3 7))))
(+ (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+ 3 7))))
(< (abs (- (+ 3 7) (+ 3 7))) (abs (- (+ 3 8) (+ 3 7))))
(< (abs (- (+ 3 7) (+ 3 9))) (abs (- (+ 3 8) (+ 3 7))))
(< (abs (- (+ 3 7) (+ 4 7))) (abs (- (+ 3 8) (+ 3 7))))
(< (abs (- (+ 4 7) (+ 3 7))) (abs (- (+ 3 8) (+ 3 7))))
eit
exit
(planner world-state '(at '(3 7) w0) goal-ops)
exit
(planner world-state '(at '(3 7) w0) goal-ops)
(planner world-state '(at '(5 3) w0) goal-ops)
exit
(planner world-state '(at '(5 3) w0) goal-ops)
exit
(planner world-state '(at '(7 8) w0) goal-ops)
exit
(planner world-state '(at '(7 8) w0) goal-ops)
exit
(planner world-state '(at '(5 3) w0) goal-ops)
(planner world-state '(at '(7 8) w0) goal-ops)
exit
(planner world-state '(at '(7 8) w0) goal-ops)
exit
(planner world-state '(at '(7 8) w0) goal-ops)
exit
(planner world-state '(at '(7 8) w0) goal-ops)
exit
(planner world-state '(at '(7 8) w0) goal-ops)
exit
(planner world-state '(at '(2 6) w0) goal-ops)
(planner world-state '(at '(9 2) w0) goal-ops)
exit
(planner world-state '(at '(2 6) w0) goal-ops)
exit
(planner world-state '(at '(2 6) w0) goal-ops)
exit
(planner world-state '(at '(2 6) w0) goal-ops)
exit
(planner world-state '(at '(2 6) w0) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
(planner world-state '(complete) goal-ops)
exit
complete-puzzle
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
xit
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(planner initial-state '(on '(6 2) b2) box-ops)
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
                           (> (abs (- (? wy) (? dy)))
                              (abs (- (? by) (? dy)))
                              )
(> (abs (- 5 8)) (abs (- 6 8)))
(and 1 1 1)
(and true true true0
)
(and true true true)
(and true false true)
(and true true false true)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
(planner initial-state '(on '(6 2) b1) box-ops)
(planner initial-state '(on '(2 5) b1) box-ops)
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
(planner initial-state '(on '(6 2) b1) box-ops)
(planner initial-state '(on '(2 5) b1) box-ops)
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exir
exit
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
(> (abs (- 2 5)) (abs (- 3 5)))
(and (> (abs (- 2 5)) (abs (- 3 5))) (> (- 1 5) (- 2 5)))
(and (> (abs (- 2 5)) (abs (- 3 5))) (> (abs (- 1 5)) (abs(- 2 5))))
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
(planner initial-state '(on '(6 2) b1) box-ops)
(planner initial-state '(on '(2 5) b0) box-ops)
(planner initial-state '(on '(2 5) b2) box-ops)
(planner initial-state '(on '(6 2) b0) box-ops)
(planner initial-state '(on '(6 2) b2) box-ops)
exi
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
(get (planner initial-state '(on '(2 5) b0) box-ops) :cmds)
(cons (get (planner initial-state '(on '(2 5) b0) box-ops) :cmds))
(cons (get (planner initial-state '(on '(2 5) b0) box-ops) :cmds) '())
(complete-puzzle)
exit
(complete-puzzle)
exit
