exit
(absorb)
(cgsx.tools.matcher)
clear
exit
(apply-op setup-ops)
exit
(socket-read s25)
quit
(mfind ['(set-floor ?patch) setup-ops] (? f))
(mfind ['{:cmd (set-floor ?patch)} setup-ops] (? f))
(mfind* ['{:cmd (set-floor ?patch)} setup-ops] (? f))
(mfind* ['{:cmd (set-floor ?patch)} setup-ops] (? patch))
(mfind ['{:cmd (set-floor ?patch)} setup-ops] (? patch))
(mfind* [cmd setup-ops])
state2
(mfind* ['(is ?dest-patch floor) state2)
(mfind* ['(is ?dest-patch floor) state2])
(mfind* ['(is ?dest-patch floor) state2] println)
exit
cmd-list
(receive-cmd cmd-list (set-box bob))
(receive-cmd cmd-list '(set-box bob))
cmd-list
exit
cmd-list
(-> cmd-list (receive-cmd cmd-list '(set-box bob)))
(receive-cmd cmd-list '(set-box bob))
(-> cmd-list (receive-cmd cmd-list '(set-box bob)))
(-> cmd-list '(receive-cmd cmd-list '(set-box bob)))
(-> cmd-list (receive-cmd cmd-list '(set-box bob)))
exit]
(receive-cmd cmd-list '(set-box bob))
(receive-cmd cmd-list (set-box bob))
exit
cmd-list
(receive-cmd cmd-list '(set-box bob))
exit
cmd-list
(receive-cmd cmd-list '(set-box bob))
cmd-list
exit
(receive-cmd '())
exit
(receive-cmd '())
exit
(receive-cmd '())
exit
(receive-cmd '())
exit
(receive-cmd '())
exit
(receive-cmd '())
exit
cmd-list
exit
(setup-world cmd-list)
(mfind [(first cmd-list) setup-ops])
(mfind [(first cmd-list) setup-ops] mout)
(mfind [(first cmd-list) setup-ops] (println mout))
(mfind [(first cmd-list) setup-ops] (println mout)
)
(mfind* [(first cmd-list) setup-ops])
(setup-ops :pre)
(setup-ops {:cmd})
setup-ops
setup-ops (:add)
(setup-ops :add)
(setup-ops {:add})
(setup-ops {set-floor})
(setup-ops(set-floor))
(setup-ops{set-floor})
clear
(first setup-ops)
(first setup-ops[set-floor])
(mfind [set-floor setup-ops])
(mfind* [:cmd (first setup-ops)])
(mfind* [cmd (first setup-ops)])
(mfind* [(:cmd) (first setup-ops)])
(mfind* [(set-floor ?patch) (first setup-ops)])
(mfind* [(set-floor ?patch) cmd-list])
exit
(setup-world cmd-list)
(apply-setup '() cmd-list setup-ops)
(apply-setup '{} cmd-list setup-ops)
state2
(def state3 #{})
state3
(apply-setup state3 cmd-list setup-ops)
state3
(def state4 (apply-setup state3 cmd-list setup-ops))
state
state4
undef state4
exit
state-list
exit
state-list
exit
state-list
exit
state-list
exit
goal-state
exit
state-list
(apply-op state-list (first block-ops))
exit
(ops-search state-list goal-state #{})
exit
(planner state-list goal-state block-ops)
exit
(planner state-list goal-state block-ops)
exit
(planner state-list goal-state block-ops)
exit
state-list
exit
(planner state-list goal-state block-ops)
exit
(ops-search state-list goal-state #{})
exit
(ops-search state-list goal-state #{})
(planner state-list goal-state block-ops)
exit
(planner state-list goal-state block-ops)
goal-state
exit
goal-state
(planner state-list goal-state block-ops)
exit
(planner state-list goal-state block-ops)
exit
(planner state-list goal-state block-ops)
exit
(planner state-list goal-state block-ops)
xit
exit
(planner state-list goal-state block-ops)
(planner state-list #{(holds patch-4-8 turtle 82)} block-ops)
(planner state-list '#{(holds patch-4-8 turtle 82)} block-ops)
patch-4-8
exit
(planner state-list '#{(holds patch-4-8 turtle 82)} block-ops)
exit
(planner state-list '#{(holds patch-4-8 turtle 82)} block-ops)
exit
(planner state-list '#{(holds patch-4-8 turtle 82)} block-ops)
state-list
(planner state-list '#{(holds patch-4-8 turtle-82)} block-ops)
(planner state-list '#{(holds patch-2-8 turtle-82)} block-ops)
(planner state-list '#{(holds patch-3-8 turtle-82)} block-ops)
(planner state-list '#{(holds patch-3-9 turtle-82)} block-ops)
(planner state-list '#{(holds patch-3-6 turtle-82)} block-ops)
(planner state-list '#{(holds patch-4-8 turtle-82)} block-ops)
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops '#{})
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops '())
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops :world)
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops :world '#{})
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
eit
exit
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
(first block-ops)
exit
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
exit
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
exit
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
(ops-search state-list '((holds patch-4-8 turtle-82) (holds patch 3-8 nil)) block-ops)
exit
(ops-search state-list '((holds patch-4-8 turtle-82) (holds patch 3-8 nil)) block-ops)
(ops-search state-list '((holds patch-4-8 turtle-82) (holds patch-3-8 nil)) block-ops)
(ops-search state-list '#{(holds patch-4-8 turtle-82)} block-ops)
exit
(ops-search state-list '#{(holds patch-4-8 turtle-82)} block-ops)
(ops-search state-list '#{(holds patch-4-8 turtle-82) (holds patch-3-8 nil)} block-ops)
state-list
exit
(ops-search state-list '#{(holds patch-4-8 turtle-82)} block-ops)
exit
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
exi
exit
(use 'clojure.tools.trace)
(trace (* 2 3))
(trace-vars planner)
(trace-vars ops-search)
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
(def test-state '#{(is patch-1-1 floor) (is patch-2-1 floor) (holds patch-1-1 bob) (is bob worker) (adj patch-1-1 patch-2-1)})
test-state
(ops-search test-state '((holds patch-2-1 bob)) block-ops)
(untrace-vars ops-search
)
(trace-vars apply-op)
(ops-search test-state '((holds patch-2-1 bob)) block-ops)
exit
(trace-vars apply-op)
(use 'clojure.tools.trace)
(trace-vars apply-op)
(ops-search test-state '((holds patch-2-1 bob)) block-ops)
(def test-state '#{(is patch-1-1 floor) (is patch-2-1 floor) (holds patch-1-1 bob) (is bob worker) (adj patch-1-1 patch-2-1)})
(ops-search test-state '((holds patch-2-1 bob)) block-ops)
(def test-state '#{(is patch-1-1 floor) (is patch-2-1 floor) (holds patch-1-1 bob) (is bob worker) (adj patch-1-1 patch-2-1) (adj patch-2-1 patch-1-1})
(def test-state '#{(is patch-1-1 floor) (is patch-2-1 floor) (holds patch-1-1 bob) (is bob worker) (adj patch-1-1 patch-2-1) (adj patch-2-1 patch-1-1)})
(ops-search test-state '((holds patch-2-1 bob)) block-ops)
(def test-state '#{(is patch-1-1 floor) (is patch-2-1 floor) (holds patch-1-1 bob) (holds patch-2-1 nil) (is bob worker) (adj patch-1-1 patch-2-1) (adj patch-2-1 patch-1-1)})
(ops-search test-state '((holds patch-2-1 bob)) block-ops)
(untrace-vars apply-ops)
(untrace-vars apply-op))
(ops-search test-state '((holds patch-2-1 bob)) block-ops)
(trace-vars apply-op)
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
exit
(use 'clojure.tools.trace)
(trace-vars apply-op)
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
exit
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
exit
(ops-search state-list '((holds patch-4-8 turtle-82)) block-ops)
(ops-search state-list goal-state block-ops)
exit
