exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
                           (> (abs (- (? wy) (? dy)))
                              (abs (- (? by) (? dy)))
                              )
(> (abs (- 5 8)) (abs (- 6 8)))
(and 1 1 1)
(and true true true0
)
(and true true true)
(and true false true)
(and true true false true)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
(planner initial-state '(on '(6 2) b1) box-ops)
(planner initial-state '(on '(2 5) b1) box-ops)
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
(planner initial-state '(on '(6 2) b1) box-ops)
(planner initial-state '(on '(2 5) b1) box-ops)
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b2) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exir
exit
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b1) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
exit
(planner initial-state '(on '(5 8) b0) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
(> (abs (- 2 5)) (abs (- 3 5)))
(and (> (abs (- 2 5)) (abs (- 3 5))) (> (- 1 5) (- 2 5)))
(and (> (abs (- 2 5)) (abs (- 3 5))) (> (abs (- 1 5)) (abs(- 2 5))))
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
exit
(planner initial-state '(on '(2 5) b1) box-ops)
(planner initial-state '(on '(5 8) b1) box-ops)
(planner initial-state '(on '(6 2) b1) box-ops)
(planner initial-state '(on '(2 5) b0) box-ops)
(planner initial-state '(on '(2 5) b2) box-ops)
(planner initial-state '(on '(6 2) b0) box-ops)
(planner initial-state '(on '(6 2) b2) box-ops)
exi
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
exit
(complete-puzzle)
(get (planner initial-state '(on '(2 5) b0) box-ops) :cmds)
(cons (get (planner initial-state '(on '(2 5) b0) box-ops) :cmds))
(cons (get (planner initial-state '(on '(2 5) b0) box-ops) :cmds) '())
(complete-puzzle)
exit
(complete-puzzle)
exit
(try-route ((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
rxit
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(planner (at '(2 6) w0) step-ops)
(planner '(at '(2 6) w0) step-ops)
(planner initial-state '(at '(2 6) w0) step-ops)
(get (planner initial-state '(at '(2 6) w0) step-ops) :state)
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
clear
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
exi
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
exit
(try-route '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) initial-state '())
(planner initial-state '(at '(2 6) w0) worker-ops)
exit
(planner initial-state '(at '(2 6) w0) worker-ops)
(planner initial-state '(at '(2 5) w0) worker-ops)
exit
(planner initial-state '(at '(2 5) w0) worker-ops)
(planner initial-state '(at '(2 6) w0) worker-ops)
exit
(planner initial-state '(at '(2 6) w0) worker-ops)
exit
(planner initial-state '(at '(2 6) w0) worker-ops)
exit
(planner initial-state '(at '(2 6) w0) worker-ops)
(planner initial-state '(at '(9 1) w0) worker-ops)
exit
exitg
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
(mfor ['(on ?t ?b) initial-state] '(on ?t ?b))
(mfor ['(on ?t ?b) initial-state] '(on (? t) (? b)))
(mfor ['(on ?t ?b) initial-state] (on (? t) (? b)))
(mfor ['('on ?t ?b) initial-state] '('on (? t) (? b)))
(mfor ['(on ?t ?b) initial-state] '(on (? t) (? b)))
(mfor ['(at ?t ?b) initial-state] '(at (? t) (? b)))
(mfor ['(at ?t ?b) world-state] '(at (? t) (? b)))
exit
(mfor ['(at ?t ?b) world-state] '(at (? t) (? b)))
(mfor ['(at ?t ?b) world-state] (? t) (? b))
(mfor ['(at ?t ?b) world-state] (? t))
(mfor ['(at ?t ?b) world-state])
(mfor ['(at ?t ?b) world-state] ?)
(mfor ['(at ?t w0) world-state] '(at (? t) w0))
(mfor ['(at ?t w0) world-state] '(at '(? t) w0))
(mfor* ['(?g (at ?l ?w)) initial-state) (? g))
(mfor* ['(?g (at ?l ?w)) initial-state) (? g))])
(mfor* ['(?g (at ?l ?w)) initial-state] (? g)))
(mfor* ['(?g (at ?l ?w)) initial-state] (? g))
(mfor* ['(?g '(at ?l ?w)) initial-state] (? g))
(mfor ['(available ?l) initial-state] (? l))
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
(find-goals initial-state)
(find-goals (planner initial-state '(at '(2 5) w0) worker-ops))
(find-goals (planner initial-state '(at '(2 6) w0) worker-ops))
(mfor ['(goal ?g) (planner initial-state '(at '(2 6) w0) worker-ops))] (? g))
(mfor ['(goal ?g) (planner initial-state '(at '(2 6) w0) worker-ops)] (? g))
(mfor ['(at '(?x ?y) ?g) (planner initial-state '(at '(2 6) w0) worker-ops)] (? g))
(mfor ['(goal ?g) (get (planner initial-state '(at '(2 6) w0) worker-ops) :state)] (? g))
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
(mfor ['(goal ?g) (get (planner initial-state '(at '(2 6) w0) worker-ops) :state)] (? g))
exit
(mfor ['(goal ?g) (get (planner initial-state '(at '(2 6) w0) worker-ops) :state)] (? g))
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
(concat '() '(1 2 3))
(concat '() '(first (1 2 3))
)
(concat '() '(first (1 2 3)))
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
eit
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
ecit
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
exit
exir
exit
(find-goals (get (planner initial-state '(at '(2 6) w0) worker-ops):state))
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
(difference target-state (available '(?_x ?_y))
)
(difference target-state (available '(?_x ?_y)))
(difference target-state '(available '(?_x ?_y)))
(difference target-state ((available '(?_x ?_y))))
(difference target-state '((available '(?_x ?_y))))
(difference target-state '((available ?x)))
(difference target-state '(available ?x))
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(build-worker-routes initial-state '((at (quote (2 6)) w0) (on (quote (4 6)) b1) (at (quote (3 6)) w0) (on (quote (5 6)) b1) (at (quote (5 5)) w0) (on (quote (5 8)) b1)) '())
exit
(try-goal '(at '(5 8) b1) initial-state '())
exit
(try-goal '(at '(5 8) b1) initial-state '())
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exirt
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(try-goal '(on '(5 8) b1) initial-state '())
exit
(format-state world-state)
(def new-state (union (difference world-state '(at '(3 8) w0)) '(at '(3 7) w0)))
new-state
(def new-state (union (difference world-state '((at '(3 8) w0))) '((at '(3 7) w0))))
new-state
(format-state new-state)
new
new-state
(format-state new-state)
exit
(def new-state (union (difference world-state '((at '(3 8) w0))) '((at '(3 7) w0))))
(format-state new-state)
exit
(def new-state (union (difference world-state '((at '(3 8) w0))) '((at '(3 7) w0))))
(format-state new-state)
clear
(A*search world-state '((at '(2 6) w0)) format-state)
exit
(def new-state (union (difference world-state '((at '(3 8) w0))) '((at '(3 7) w0))))
(format-state new-state)
(A*search {:state world-state :cost 0} '((at '(2 6) w0)) format-state)
(A*search {:state world-state :cost 0} '(at '(2 6) w0) format-state)
(< (abs (- (+ 3 7) (+ 4 7))) (abs (- (+ 3 8) (+ 3 7))))
(use clojure.tools.trace)
(use 'clojure.tools.trace)
(trace-vars A*search)
(A*search {:state world-state :cost 0} '(at '(2 6) w0) format-state)
(trace-vars format-state))
(trace-vars format-state)
(A*search {:state world-state :cost 0} '(at '(2 6) w0) format-state)
exit
(use 'clojure.tools.trace)
(trace-vars A*search)
(trace-vars format-state)
(A*search {:state world-state :cost 0} '(at '(2 6) w0) format-state)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state)
(untrace-vars format-state)
(untrace-vars A*search)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state [:debug])
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :debug)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :keys[debug])
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :keys [debug])
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :keys debug)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state {:keys debug})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state (:keys debug))
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state debug)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state [debug])
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true))
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(A*search {:state world-state :cost 0} '((at '(4 8) w0)) format-state :state :cost :undef true)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef :true)
(format-state world-state)
exit
(format-state world-state)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef :true)
(use 'clojure.tools.trace)
(trace-vars A*search)
(trace-vars format-state)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef :true)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars A*search)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(trace-vars format-state)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(trace-vars apply-all)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(format-state {:state world-state :cost 0})
(trace-vars list)
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars A*search)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars A*search)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(trace-vars format-state)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(trace-vars format-state)
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars clojure.lang.Util.compare)
(trace-vars compare)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(trace-vars compare)
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars compare)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars disj)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(trace-vars format-state)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
exit
(trace-vars format-state)
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars disj)
(trace-vars format-state)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(untrace-vars disj)
(trace-vars map)
(untrace-vars map)
(trace-vars apply-all)
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
exit4
exit
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
exir
exit
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
exit
(format-state {:state world-state :cost 0})
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(use 'clojure.tools.trace)
(trace-vars A*search)
(trace-vars format-state))
(A*search {:state world-state :cost 0} '(at '(4 8) w0) format-state :state :cost :undef true)
(A*search {:state world-state :cost 0} '((at '(4 8) w0)) format-state :state :cost :undef true)
(contains? world-state '(at '(3 8) w0))
(contains? world-state '(at '(3 8) w1))
(A*search {:state world-state :cost 0} (fn [x] (contains? x (at '(4 8) w0))) format-state :state :cost :undef true)
(A*search {:state world-state :cost 0} (fn [x] (contains? x '(at '(4 8) w0))) format-state :state :cost :undef true)
exit
(A*search {:state world-state :cost 0} (fn [x] (contains? x '(at '(4 8) w0))) format-state :state :cost :undef true)
(A*search {:state world-state :cost 0} (fn [x] (contains? x '(at '(2 6) w0))) format-state :state :cost :undef true)
exit
